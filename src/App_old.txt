import { useState } from "react";
import React from "react";

const tempMovieData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
  },
  {
    imdbID: "tt0133093",
    Title: "The Matrix",
    Year: "1999",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
  },
  {
    imdbID: "tt6751668",
    Title: "Parasite",
    Year: "2019",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg",
  },
];

const tempWatchedData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    runtime: 148,
    imdbRating: 8.8,
    userRating: 10,
  },
  {
    imdbID: "tt0088763",
    Title: "Back to the Future",
    Year: "1985",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg",
    runtime: 116,
    imdbRating: 8.5,
    userRating: 9,
  },
];

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);

function Logo() {
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

function Search() {
  const [query, setQuery] = useState("");
  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(e) => setQuery(e.target.value)}
    />
  );
}

function NumResult({ movieLength }) {
  return (
    <p className="num-results">
      Found <strong>{movieLength}</strong> results
    </p>
  );
}

function NavBar({ children }) {
  return <nav className="nav-bar">{children}</nav>;
}

function WatchSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));

  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

function WatchedMovie({ watched }) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchMovieItem movie={movie} key={movie.imdbID} />
      ))}
    </ul>
  );
}

function WatchMovieItem({ movie }) {
  return (
    <li>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
      </div>
    </li>
  );
}

// function Button({ children, className, onClick }) {
//   return (
//     <button className={className} onClick={onClick}>
//       {children}
//     </button>
//   );
// }

function Box({ children }) {
  const [isOpen, setIsOpen] = useState(true);
  return (
    <div className="box">
      <button className="btn-toggle" onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "‚Äì" : "+"}
      </button>

      {isOpen && children}
    </div>
  );
}

// function WatchBox({ children }) {
//   const [isOpen2, setIsOpen2] = useState(true);
//   return (
//     <div className="box">
//       <button
//         className="btn-toggle"
//         onClick={() => setIsOpen2((open) => !open)}
//       >
//         {isOpen2 ? "‚Äì" : "+"}
//       </button>

//       {isOpen2 && children}
//     </div>
//   );
// }

function Main({ children }) {
  return <main className="main">{children}</main>;
}

export default function App() {
  const [movies, setMovies] = useState(tempMovieData);
  const [watched, setWatched] = useState(tempWatchedData);

  function addWatchHandler(watch) {
    // setWatched((watched) => [...watched, watch]);

    setWatched((watched) => {
      // Check if the item with the given imdbID is already in the watched list
      const itemExists = watched.some((item) => item.imdbID === watch.imdbID);

      // If it exists, return the original array (no update needed)
      // If it doesn't exist, add the new item to the array
      return itemExists ? watched : [...watched, watch];
    });
  }

  return (
    <React.Fragment>
      <NavBar>
        <Logo />
        <Search />
        <NumResult movieLength={movies.length} />
      </NavBar>

      <Main>
        <Box>
          <MovieList movies={movies} addWatch={addWatchHandler} />
        </Box>

        <Box>
          <WatchSummary watched={watched} />
          <WatchedMovie watched={watched} />
        </Box>
      </Main>
    </React.Fragment>
  );
}

function MovieList({ movies, addWatch }) {
  return (
    <ul className="list">
      {movies?.map((movie) => (
        <MovieListItem movie={movie} key={movie.imdbID} addWatch={addWatch} />
      ))}
    </ul>
  );
}

function MovieListItem({ movie, addWatch }) {
  function onAddWatched() {
    // console.log(movie);
    addWatch(movie);
  }

  return (
    <React.Fragment>
      <li onClick={onAddWatched}>
        <img src={movie.Poster} alt={`${movie.Title} poster`} />
        <h3>{movie.Title}</h3>
        <div>
          <p>
            <span>üóì</span>
            <span>{movie.Year}</span>
          </p>
        </div>
      </li>
    </React.Fragment>
  );
}
